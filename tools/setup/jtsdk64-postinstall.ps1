#-----------------------------------------------------------------------------#
# Name ........: jtsdk64-postinstall.ps1
# Project .....: HAMLIB SDK - JTSDK64 Tools Project
# Version .....: 4.0.0a
# Description .: Installs Components based on User selections
# 
# Usage .......: Call from jtsdk64-tools-setup environ => jtsdk64-postinstall $*
#
# Concept .....: (C) Greg, Beam, KI7MT, <ki7mt@yahoo.com> and batch file work
#
# Copyright ...: (c) Copyright (C) 2021-2025 JTSDK Contributors
#
# License .....: GPLv3
# 
# Updates .....: Conversion to PS: Steve VK3VM 2020-12-24 - 2023-04-10
#                Slight mods for migration to Version 4 of HLSDK (JTSDK): Coordinated by Steve VK3VM 2023-6-02
#                Code to pull and deploy PowerShell: Coordiated by Steve VK3VM 2024-01-15
#                Updates to support creation of Link to Qt coordinated by Steve VK3CM 2024-11-10 -> 12-23
#
# Note ........: This script will FAIL unless it is executed from within a
#                shell generated by jtsdk64-setup.ps1 ! 
#
#-----------------------------------------------------------------------------#

# ------------------------------------------------------------------- GLOBALS

$defaultQt=$env:QT6_VER

# ------------------------------------------------------------------- MESSAGE DISPLAY
function MsgDisplay {
	Write-Host ""
	Write-Host " If you wish to re-enter selections type: postinstall"
	exit (0)
}

# ------------------------------------------------------------------- WRITE ERROR MESSAGE
function WriteErrorMessage($param) {
    Write-Host ""
    Write-Host "**************************************************** " -ForegroundColor yellow
	Write-Host "Processing Error" -ForegroundColor red
    Write-Host "**************************************************** " -ForegroundColor yellow
	Write-Host ""
	Write-Host "The exit status from step `[ $param `] returned"
	Write-Host "a non-zero status. Check the error message and"
	Write-Host "and try again."
	Write-Host ""
	Write-Host "If the problem presists, contact: JTSDK@Groups.io"
	Write-Host ""
	exit (-1)
}

# ------------------------------------------------------------------- START MESSAGE
function StartMessage {
	Write-Host ""
	Write-Host "------------------------------------------------------"
	Write-Host "  JTSDK64 Tools Post Install/Redeployment Selections"
	Write-Host "------------------------------------------------------"
	Write-Host ""
	Write-Host " At the prompts indicate which components you want to"
	Write-Host " install or redeploy."
	Write-Host ""
	Write-Host " For VC Runtimes, OmniRig, Git, MSYS2 and VS Code use"
	Write-Host " --> Y`/Yes or N`/No"
	Write-Host ""
	Write-Host " For Qt Installations:"
	Write-Host ""
	Write-Host "   Y = Default ( $env:QT6_VER )"
	Write-Host "   N = Skip Installation"
	Write-Host ""
	Write-Host "   Qt 5.15.2 must be deployed from Archive using the" 
	Write-Host "   Qt Maintenance Tool."
	Write-Host ""
	Write-Host " NOTES: VC Runtimes, Git, Qt & MSYS2 are mandatory to "  
	Write-Host " build JT-software."
	Write-Host ""
	Write-Host " The Latest PowerShell is highly recommended for"
	Write-Host " improved performance."
}

# ------------------------------------------------------------------- DISPLAY SELECTIONS
function DisplaySelections ($userInputPS, $userInputVCR, $userInputOmniRig, $userInputGit, $userInputQt, $userLinkQt, $userInputMsys2, $userInputVSCode) {
	Write-Host ""
	Write-Host "* Your Installation Selections:"
	Write-Host ""
	Write-Host "  --> Latest PowerShell .............: $userInputPS"
	Write-Host "  --> VC Runtimes ...................: $userInputVCR"
	Write-Host "  --> OmniRig .......................: $userInputOmniRig"
	Write-Host "  --> Git ...........................: $userInputGit"
	Write-Host "  --> Qt ............................: $userInputQt"
	if ($userInputQt -eq "N") {
		Write-Host "  --> --> Link to Qt ................: $userLinkQt"
	}
	if ($userInputQt -eq "Y") {
		Write-Host "  --> --> Link to Qt ................: Created Automatially"
	}
	Write-Host "  --> MSYS2 .........................: $userInputMsys2"
	Write-Host "  --> VS Code .......................: $userInputVSCode"
	Write-Host ""
}

# ------------------------------------------------------------------- GET SELECTIONS
function GetSelections([ref]$iPS, [ref]$iVCR, [ref]$iOmniRig, [ref]$iGit, [ref]$iQt, [ref]$lQt, [ref]$iMsys2, [ref]$iVSCode) {
	Write-Host ""
	Write-Host "* Enter Your Install/Redeployment Selection(s)`:"
	Write-Host ""

	$iPS.value      = Read-Host " (required) Latest PowerShell (Y|N) ."
	$iPS.value      = $iPS.value.ToUpper()
	$iVCR.value     = Read-Host " (required) VC/C++ Runtimes (Y|N) ..."
	$iVCR.value     = $iVCR.value.ToUpper()
	$iOmniRig.value = Read-Host " (required) OmniRig (Y|N) ..........."
	$iOmniRig.value = $iOmniRig.value.ToUpper() 
	$iGit.value     = Read-Host " (required) Git-SCM (Y|N) ..........."
	$iGit.value     = $iGit.value.ToUpper()
	$iQt.value      = Read-Host " (required) Qt $env:QT6_VER (Y|N) .........."
	$iQt.value      = $iQt.value.ToUpper()
	if ($iQt.value -eq "N") {
		$lQt.value  = $lQt.value = Read-Host " --> Create link to Qt (Y|N) ........"
		$lQt.value  = $lQt.value.ToUpper()
	}
	$iMsys2.value   = Read-Host " (required) MSYS2 Setup (Y|N) ......."
	$iMsys2.value   = $iMsys2.value.ToUpper()
	$iVSCode.value  = Read-Host " (optional) VS Code (Y|N) ..........."
	$iVSCode.value  = $iVSCode.value.ToUpper()
}


# ------------------------------------------------------------------- PROCESS PowerShell
function ProcessPS {
	$install = "Y"
    $step = "Latest PowerShell Install"

    $cmd = "$env:JTSDK_SETUP\powershell\Install-PowerShell.ps1"
    $param="install"
    Invoke-Expression "$cmd $param"
	
    if ($LASTEXITCODE -ne 0) { WriteErrorMessage($step) }
}

# ------------------------------------------------------------------- PROCESS VC RUNTIMES
function ProcessVCR {
	$install = "Y"
    $step = "VC Runtimes Install"

    $cmd = "$env:JTSDK_SETUP\vcruntime\Install-VCRuntime.ps1"
    $param="install"
    Invoke-Expression "$cmd $param"
	
    if ($LASTEXITCODE -ne 0) { WriteErrorMessage($step) }
}

# ------------------------------------------------------------------- PROCESS OMNIRIG
function ProcessOmniRig {
	$install = "Y"
    $step = "OmniRig Install"

    $cmd = "$env:JTSDK_SETUP\omnirig\Install-Omnirig.ps1"
    $param="install"
    Invoke-Expression "$cmd $param"
	
    if ($LASTEXITCODE -ne 0) { WriteErrorMessage($step) }
}

# ------------------------------------------------------------------- PROCESS GIT
function ProcessGit {
    $install = "Y"
    $step = "Git Install"

    $cmd = "$env:JTSDK_SETUP\git\Install-Git.ps1"
    $param="install"
    Invoke-Expression "$cmd $param"
	
    if ($LASTEXITCODE -ne 0) { WriteErrorMessage($step) }
}

# ------------------------------------------------------------------- PROCESS VS CODE
function ProcessVSCode {
    $install="Y"
    $step = "VS Code Install"
    
    $cmd = "$env:JTSDK_SETUP\vscode\Install-VSCode.ps1" # install"
    $param="install"
    Invoke-Expression "$cmd $param"

    if ($LASTEXITCODE -ne 0) { WriteErrorMessage($step) }
}

# ------------------------------------------------------------------- PROCESS Qt
function ProcessQt {
	
	if  ($userInputQt -eq "Y") {
		$install="Y"

		$cmd = "$env:JTSDK_SETUP\qt\Generate-JSQt.ps1"
		$step = "QT Full Install"
        $param="full"
        Invoke-Expression "$cmd $param"
        if ($LASTEXITCODE -ne 0) { WriteErrorMessage($step) }
		Get-ChildItem $env:JTSDK_CONFIG | Where{$_.Name -Match "qt*"} | Remove-Item
		Write-Host "  --> Setting Qt configuration marker [$defaultQt]"
		Write-Host ""
		$tmpOut = $env:JTSDK_CONFIG + "\qt" + $defaultQt
		Out-File -FilePath $tmpOut
		
		$step = "Qt Full Deployment"
		$cmd = "$env:JTSDK_SETUP\qt\Install-Qt.ps1"
		$param="full"
		Invoke-Expression "$cmd $param"
		if ($LASTEXITCODE -ne 0) { WriteErrorMessage($step) }
	}
}

# ------------------------------------------------------------------- PROCESS Link To Qt
function ProcessLinkQt ($userInputLinkQt){
	
	if  ($userInputLinkQt -eq "Y") {
		$step = "Qt Link Creation"
		$cmd = "$env:JTSDK_SCRIPTS\Create-Link-Qt.ps1"
		# $param="full"					# No paramtrs
		# Invoke-Expression "$cmd $param"
		Invoke-Expression "$cmd"
		# if ($LASTEXITCODE -ne 0) { WriteErrorMessage($step) } # Has its owns specialist error handlers
	}
}

# ------------------------------------------------------------------- PROCESS MSYS2
function ProcessMSYS2 {
	$install="Y"
	$step = "MSYS2 Deploy"
    $cmd = "$env:JTSDK_HOME\tools\msys64\msys2_shell.cmd"
	$exitCode = Invoke-Command -ScriptBlock { cmd /c $cmd *> $null; return $LASTEXITCODE }
	if ($exitCode -ne 0) { WriteErrorMessage($step) }
}

# ------------------------------------------------------------------- DISPLAY POST INSTALL MESSAGES
function DisplayPostInstall ($userInputPS, $userInputVCR, $userInputOmniRig, $userInputGit, $userInputQt, $userLinkQt, $userInputMsys2, $userInputVSCode, $install) {
	#if  ($install -eq "Y") {
		
		# Write-Host ""
		# Clear-Host
		Write-Host "------------------------------------------------------"
		Write-Host " JTSDK64 Tools Post Install Summary $install"
		Write-Host "------------------------------------------------------"
		Write-Host ""
		Write-Host "* Post Installation Stage Complete"
		Write-Host ""
		Write-Host "   --> Exit the JTSDK64 Tools Setup and re-open this"
		Write-Host "       tool to see the status of installed components."
		Write-Host ""

		if  ($userInputMsys2 -eq "Y") {
			Write-Host ""
			Write-Host "   --> MSYS2 Initial Setup requires several additional steps."
			Write-Host "       Open the MSYS2 environemnt and refer to the on-screen" 
			Write-Host "       messages to perform the initial installation`/updates."
			Write-Host ""
			Write-Host "   --> After fully updating MSYS2, select the appropriate menu"
			Write-Host "       option to install the Hamlib Dependencies. Close the"
			Write-Host "       installation environment."
			Write-Host ""
		}
		Write-Host "* Perform remaining tasks (i.e. building Hamlib and" -ForegroundColor yellow
		Write-Host "  Boost) under the `"JTSDK64-Tools`" Environment." -ForegroundColor yellow
	#} 
	# EXIT INSTALL

	Write-Host ""
}

#-----------------------------------------------------------------------------#
# Main Logic
#-----------------------------------------------------------------------------#

$install="N"
$userInputPS = " "
$userInputVCR = " "
$userInputOmniRig = " "
$userInputGit = " "
$userInputQt = " "
$userInputLinkQt = "N"
$userInputMsys2 = " "
$userInputVSCode = " "

Clear-Host

StartMessage 

GetSelections([ref]$userInputPS) ([ref]$userInputVCR) ([ref]$userInputOmniRig) ([ref]$userInputGit) ([ref]$userInputQt) ([ref]$userInputLinkQt) ([ref]$userInputMsys2) ([ref]$userInputVSCode)

DisplaySelections ($userInputPS) ($userInputVCR) ($userInputOmniRig) ($userInputGit) ($userInputQt) ($userInputLinkQt) ($userInputMsys2) ($userInputVSCode)

# ----------------------------------------------------------------------------- SELECTIONS

if ($userInputPS -eq "Y") { 
	ProcessPS 
	$install = "Y"
}
if ($userInputVCR -eq "Y") { 
	ProcessVCR 
	$install = "Y"
}
if ($userInputOmniRig -eq "Y") { 
	ProcessOmniRig 
	$install = "Y"
}
if ($userInputGit -eq "Y") { 
	ProcessGit
	$install = "Y"	
}
if ($userInputVSCode -eq "Y") { 
	ProcessVSCode
	$install = "Y"
}
if ($userInputQt -eq "Y") { 
	ProcessQt
	$install = "Y"	
	$userInputLinkQt = "Y"
}

if (($userInputLinkQt -eq "Y") -or  ($userInputQt -eq "Y")) { 
	ProcessLinkQt($userInputLinkQt)
	$install = "Y"	
}

if ($userInputMsys2 -eq "Y") { 
	ProcessMSYS2
	$install = "Y"	
}

# FINISHED

# DisplayPostInstall

DisplayPostInstall ($userInputPS, $userInputVCR, $userInputOmniRig, $userInputGit, $userInputQt, $userInputLinkQt, $userInputMsys2, $userInputVSCode, $install)

exit (0)